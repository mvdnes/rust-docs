var searchIndex = JSON.parse('{\
"spin":{"doc":"This crate provides spin-based versions of the primitives…","i":[[0,"barrier","spin","Synchronization primitive allowing multiple threads to…",null,null],[3,"Barrier","spin::barrier","A primitive that synchronizes the execution of multiple…",null,null],[3,"BarrierWaitResult","","A `BarrierWaitResult` is returned by `wait` when all…",null,null],[11,"new","","Creates a new barrier that can block a given number of…",0,[[],["barrier",3]]],[11,"wait","","Blocks the current thread until all threads have…",0,[[],["barrierwaitresult",3]]],[11,"is_leader","","Returns whether this thread from `wait` is the \\\"leader…",1,[[]]],[0,"lazy","spin","Synchronization primitives for lazy evaluation.",null,null],[3,"Lazy","spin::lazy","A value which is initialized on the first access.",null,null],[11,"new","","Creates a new lazy value with the given initializing…",2,[[],["lazy",3]]],[11,"force","","Forces the evaluation of this lazy value and returns a…",2,[[["lazy",3]]]],[0,"mutex","spin","Locks that have the same behaviour as a mutex.",null,null],[3,"SpinMutex","spin::mutex","A spin lock providing mutually exclusive access to data.",null,null],[3,"SpinMutexGuard","","A guard that provides mutable data access.",null,null],[3,"TicketMutex","","A spin-based ticket lock providing mutually exclusive…",null,null],[3,"TicketMutexGuard","","A guard that protects some data.",null,null],[3,"Mutex","","A spin-based lock providing mutually exclusive access to…",null,null],[3,"MutexGuard","","A generic guard that will protect some data access and…",null,null],[11,"new","","Creates a new [`SpinMutex`] wrapping the supplied data.",3,[[],["spinmutex",3]]],[11,"into_inner","","Consumes this [`SpinMutex`] and unwraps the underlying data.",3,[[]]],[11,"is_locked","","Returns `true` if the lock is currently held.",3,[[]]],[11,"lock","","Locks the [`SpinMutex`] and returns a guard that permits…",3,[[],["spinmutexguard",3]]],[11,"force_unlock","","Force unlock this [`SpinMutex`].",3,[[]]],[11,"try_lock","","Try to lock this [`SpinMutex`], returning a lock guard if…",3,[[],[["option",4],["spinmutexguard",3]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",3,[[]]],[11,"leak","","Leak the lock guard, yielding a mutable reference to the…",4,[[]]],[11,"new","","Creates a new [`TicketMutex`] wrapping the supplied data.",5,[[]]],[11,"into_inner","","Consumes this [`TicketMutex`] and unwraps the underlying…",5,[[]]],[11,"is_locked","","Returns `true` if the lock is currently held.",5,[[]]],[11,"lock","","Locks the [`TicketMutex`] and returns a guard that permits…",5,[[],["ticketmutexguard",3]]],[11,"force_unlock","","Force unlock this [`TicketMutex`], by serving the next…",5,[[]]],[11,"try_lock","","Try to lock this [`TicketMutex`], returning a lock guard…",5,[[],[["option",4],["ticketmutexguard",3]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",5,[[]]],[11,"leak","","Leak the lock guard, yielding a mutable reference to the…",6,[[]]],[11,"new","","Creates a new [`Mutex`] wrapping the supplied data.",7,[[]]],[11,"into_inner","","Consumes this [`Mutex`] and unwraps the underlying data.",7,[[]]],[11,"is_locked","","Returns `true` if the lock is currently held.",7,[[]]],[11,"lock","","Locks the [`Mutex`] and returns a guard that permits…",7,[[],["mutexguard",3]]],[11,"force_unlock","","Force unlock this [`Mutex`].",7,[[]]],[11,"try_lock","","Try to lock this [`Mutex`], returning a lock guard if…",7,[[],[["option",4],["mutexguard",3]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",7,[[]]],[11,"leak","","Leak the lock guard, yielding a mutable reference to the…",8,[[]]],[0,"once","spin","Synchronization primitives for one-time evaluation.",null,null],[3,"Once","spin::once","A primitive that provides lazy one-time initialization.",null,null],[18,"INIT","","Initialization constant of [`Once`].",9,null],[11,"new","","Creates a new [`Once`].",9,[[],["once",3]]],[11,"initialized","","Creates a new initialized [`Once`].",9,[[],["once",3]]],[11,"call_once","","Performs an initialization routine once and only once. The…",9,[[["fnonce",8]]]],[11,"get","","Returns a reference to the inner value if the [`Once`] has…",9,[[],["option",4]]],[11,"get_mut","","Returns a mutable reference to the inner value if the…",9,[[],["option",4]]],[11,"try_into_inner","","Returns a the inner value if the [`Once`] has been…",9,[[],["option",4]]],[11,"is_completed","","Returns a reference to the inner value if the [`Once`] has…",9,[[]]],[11,"wait","","Spins until the [`Once`] contains a value.",9,[[]]],[11,"poll","","Like [`Once::get`], but will spin if the [`Once`] is in…",9,[[],["option",4]]],[0,"rw_lock","spin","A lock that provides data access to either one writer or…",null,null],[3,"RwLock","spin::rw_lock","A lock that provides data access to either one writer or…",null,null],[3,"RwLockReadGuard","","A guard that provides immutable data access.",null,null],[3,"RwLockWriteGuard","","A guard that provides mutable data access.",null,null],[3,"RwLockUpgradableGuard","","A guard that provides immutable data access but can be…",null,null],[11,"new","","Creates a new spinlock wrapping the supplied data.",10,[[],["rwlock",3]]],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",10,[[]]],[11,"read","","Locks this rwlock with shared read access, blocking the…",10,[[],["rwlockreadguard",3]]],[11,"try_read","","Attempt to acquire this lock with shared read access.",10,[[],[["option",4],["rwlockreadguard",3]]]],[11,"reader_count","","Return the number of readers that currently hold the lock…",10,[[]]],[11,"writer_count","","Return the number of writers that currently hold the lock.",10,[[]]],[11,"force_read_decrement","","Force decrement the reader count.",10,[[]]],[11,"force_write_unlock","","Force unlock exclusive write access.",10,[[]]],[11,"write","","Lock this rwlock with exclusive write access, blocking the…",10,[[],["rwlockwriteguard",3]]],[11,"try_write","","Attempt to lock this rwlock with exclusive write access.",10,[[],[["option",4],["rwlockwriteguard",3]]]],[11,"upgradeable_read","","Obtain a readable lock guard that can later be upgraded to…",10,[[],["rwlockupgradableguard",3]]],[11,"try_upgradeable_read","","Tries to obtain an upgradeable lock guard.",10,[[],[["rwlockupgradableguard",3],["option",4]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",10,[[]]],[11,"leak","","Leak the lock guard, yielding a reference to the…",11,[[]]],[11,"upgrade","","Upgrades an upgradeable lock guard to a writable lock guard.",12,[[],["rwlockwriteguard",3]]],[11,"try_upgrade","","Tries to upgrade an upgradeable lock guard to a writable…",12,[[],[["rwlockwriteguard",3],["result",4]]]],[11,"downgrade","","Downgrades the upgradeable lock guard to a readable,…",12,[[],["rwlockreadguard",3]]],[11,"leak","","Leak the lock guard, yielding a reference to the…",12,[[]]],[11,"downgrade","","Downgrades the writable lock guard to a readable, shared…",13,[[],["rwlockreadguard",3]]],[11,"downgrade_to_upgradeable","","Downgrades the writable lock guard to an upgradable,…",13,[[],["rwlockupgradableguard",3]]],[11,"leak","","Leak the lock guard, yielding a mutable reference to the…",13,[[]]],[11,"from","spin::barrier","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","spin::lazy","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","spin::mutex","",3,[[]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","spin::once","",9,[[]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","spin::rw_lock","",10,[[]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"deref","spin::lazy","",2,[[]]],[11,"deref","spin::mutex","",4,[[]]],[11,"deref","","",6,[[]]],[11,"deref","","",8,[[]]],[11,"deref","spin::rw_lock","",11,[[]]],[11,"deref","","",12,[[]]],[11,"deref","","",13,[[]]],[11,"deref_mut","spin::mutex","",4,[[]]],[11,"deref_mut","","",6,[[]]],[11,"deref_mut","","",8,[[]]],[11,"deref_mut","spin::rw_lock","",13,[[]]],[11,"from","spin::mutex","",3,[[]]],[11,"from","","",5,[[]]],[11,"from","","",7,[[]]],[11,"from","spin::once","",9,[[]]],[11,"from","spin::rw_lock","",10,[[]]],[11,"fmt","spin::lazy","",2,[[["formatter",3]],["result",6]]],[11,"fmt","spin::mutex","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","spin::once","",9,[[["formatter",3]],["result",6]]],[11,"fmt","spin::rw_lock","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","spin::mutex","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","spin::rw_lock","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"drop","spin::mutex","The dropping of the MutexGuard will release the lock it…",4,[[]]],[11,"drop","","",6,[[]]],[11,"drop","spin::once","",9,[[]]],[11,"drop","spin::rw_lock","",11,[[]]],[11,"drop","","",12,[[]]],[11,"drop","","",13,[[]]],[11,"default","spin::lazy","Creates a new lazy value using `Default` as the…",2,[[],["lazy",3]]],[11,"default","spin::mutex","",3,[[],["spinmutex",3]]],[11,"default","","",5,[[],["ticketmutex",3]]],[11,"default","","",7,[[],["mutex",3]]],[11,"default","spin::rw_lock","",10,[[],["rwlock",3]]]],"p":[[3,"Barrier"],[3,"BarrierWaitResult"],[3,"Lazy"],[3,"SpinMutex"],[3,"SpinMutexGuard"],[3,"TicketMutex"],[3,"TicketMutexGuard"],[3,"Mutex"],[3,"MutexGuard"],[3,"Once"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockUpgradableGuard"],[3,"RwLockWriteGuard"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);