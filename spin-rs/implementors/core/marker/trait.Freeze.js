(function() {var implementors = {};
implementors["spin"] = [{"text":"impl&lt;R&nbsp;=&nbsp;Spin&gt; !Freeze for Barrier&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl&lt;T, F&nbsp;=&nbsp;fn() -&gt; T, R&nbsp;=&nbsp;Spin&gt; !Freeze for Lazy&lt;T, F, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, R&nbsp;=&nbsp;Spin&gt; !Freeze for SpinMutex&lt;T, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for SpinMutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, R&nbsp;=&nbsp;Spin&gt; !Freeze for TicketMutex&lt;T, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for TicketMutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, R&nbsp;=&nbsp;Spin&gt; !Freeze for Mutex&lt;T, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, R&nbsp;=&nbsp;Spin&gt; !Freeze for Once&lt;T, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, R&nbsp;=&nbsp;Spin&gt; !Freeze for RwLock&lt;T, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized, R&gt; Freeze for RwLockWriteGuard&lt;'a, T, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized, R&gt; Freeze for RwLockUpgradableGuard&lt;'a, T, R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Spin","synthetic":true,"types":[]},{"text":"impl Freeze for Loop","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()