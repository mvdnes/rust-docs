(function() {var implementors = {};
implementors["spin"] = [{"text":"impl&lt;T:&nbsp;Debug, F, R&gt; Debug for Lazy&lt;T, F, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Debug, R&gt; Debug for SpinMutex&lt;T, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized + Debug&gt; Debug for SpinMutexGuard&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Debug, R&gt; Debug for TicketMutex&lt;T, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized + Debug&gt; Debug for TicketMutexGuard&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Debug, R&gt; Debug for Mutex&lt;T, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized + Debug&gt; Debug for MutexGuard&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug, R&gt; Debug for Once&lt;T, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Debug, R&gt; Debug for RwLock&lt;T, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'rwlock, T:&nbsp;?Sized + Debug&gt; Debug for RwLockReadGuard&lt;'rwlock, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'rwlock, T:&nbsp;?Sized + Debug, R&gt; Debug for RwLockUpgradableGuard&lt;'rwlock, T, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'rwlock, T:&nbsp;?Sized + Debug, R&gt; Debug for RwLockWriteGuard&lt;'rwlock, T, R&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()