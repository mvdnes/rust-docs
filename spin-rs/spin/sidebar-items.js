initSidebarItems({"mod":[["barrier","Synchronization primitive allowing multiple threads to synchronize the beginning of some computation."],["lazy","Synchronization primitives for lazy evaluation."],["mutex","Locks that have the same behaviour as a mutex."],["once","Synchronization primitives for one-time evaluation."],["relax","Strategies that determine the behaviour of locks when encountering contention."],["rw_lock","A lock that provides data access to either one writer or many readers."]],"type":[["Barrier","A primitive that synchronizes the execution of multiple threads. See [`barrier::Barrier`] for documentation."],["Lazy","A value which is initialized on the first access. See [`lazy::Lazy`] for documentation."],["Mutex","A primitive that synchronizes the execution of multiple threads. See [`mutex::Mutex`] for documentation."],["Once","A primitive that provides lazy one-time initialization. See [`once::Once`] for documentation."],["RwLock","A lock that provides data access to either one writer or many readers. See [`rw_lock::RwLock`] for documentation."],["RwLockUpgradableGuard","A guard that provides immutable data access but can be upgraded to [`RwLockWriteGuard`]. See [`rw_lock::RwLockUpgradableGuard`] for documentation."],["RwLockWriteGuard","A guard that provides mutable data access. See [`rw_lock::RwLockWriteGuard`] for documentation."]]});