var searchIndex={};
searchIndex["podio"] = {"doc":"Additional methods for Read and Write","i":[[4,"LittleEndian","podio","Little endian. The number `0xABCD` is stored `[0xCD, 0xAB]`",null,null],[4,"BigEndian","","Big endian. The number `0xABCD` is stored `[0xAB, 0xCD]`",null,null],[8,"Endianness","","Trait implementing conversion methods for a specific…",null,null],[10,"int_to_target","","Converts a value from the platform type to the specified…",0,[[["endianconvert"]],["endianconvert"]]],[10,"int_from_target","","Converts a value from the sepcified endianness to the…",0,[[["endianconvert"]],["endianconvert"]]],[8,"EndianConvert","","Generic trait for endian conversions on integers",null,null],[10,"to_be","","Convert self to a big-endian value",1,[[],["self"]]],[10,"to_le","","Convert self to a little-endian value",1,[[],["self"]]],[10,"from_be","","Convert a big-endian value to the target endianness",1,[[],["self"]]],[10,"from_le","","Convert a little-endian value to the target endiannes",1,[[],["self"]]],[8,"WritePodExt","","Additional write methods for a io::Write",null,null],[10,"write_u64","","Write a u64",2,[[["self"],["u64"]],["result"]]],[10,"write_u32","","Write a u32",2,[[["self"],["u32"]],["result"]]],[10,"write_u16","","Write a u16",2,[[["u16"],["self"]],["result"]]],[10,"write_u8","","Write a u8",2,[[["self"],["u8"]],["result"]]],[10,"write_i64","","Write a i64",2,[[["i64"],["self"]],["result"]]],[10,"write_i32","","Write a i32",2,[[["self"],["i32"]],["result"]]],[10,"write_i16","","Write a i16",2,[[["self"],["i16"]],["result"]]],[10,"write_i8","","Write a i8",2,[[["self"],["i8"]],["result"]]],[10,"write_f32","","Write a f32",2,[[["f32"],["self"]],["result"]]],[10,"write_f64","","Write a f64",2,[[["self"],["f64"]],["result"]]],[8,"ReadPodExt","","Additional read methods for a io::Read",null,null],[10,"read_u64","","Read a u64",3,[[["self"]],[["result",["u64"]],["u64"]]]],[10,"read_u32","","Read a u32",3,[[["self"]],[["u32"],["result",["u32"]]]]],[10,"read_u16","","Read a u16",3,[[["self"]],[["u16"],["result",["u16"]]]]],[10,"read_u8","","Read a u8",3,[[["self"]],[["result",["u8"]],["u8"]]]],[10,"read_i64","","Read a i64",3,[[["self"]],[["i64"],["result",["i64"]]]]],[10,"read_i32","","Read a i32",3,[[["self"]],[["result",["i32"]],["i32"]]]],[10,"read_i16","","Read a i16",3,[[["self"]],[["result",["i16"]],["i16"]]]],[10,"read_i8","","Read a i8",3,[[["self"]],[["i8"],["result",["i8"]]]]],[10,"read_f32","","Read a f32",3,[[["self"]],[["result",["f32"]],["f32"]]]],[10,"read_f64","","Read a f64",3,[[["self"]],[["result",["f64"]],["f64"]]]],[10,"read_exact","","Read a specific number of bytes",3,[[["self"],["usize"]],[["vec",["u8"]],["result",["vec"]]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"int_to_target","","",4,[[["endianconvert"]],["endianconvert"]]],[11,"int_from_target","","",4,[[["endianconvert"]],["endianconvert"]]],[11,"int_to_target","","",5,[[["endianconvert"]],["endianconvert"]]],[11,"int_from_target","","",5,[[["endianconvert"]],["endianconvert"]]]],"p":[[8,"Endianness"],[8,"EndianConvert"],[8,"WritePodExt"],[8,"ReadPodExt"],[4,"LittleEndian"],[4,"BigEndian"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);