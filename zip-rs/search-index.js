var searchIndex = JSON.parse('{\
"zip":{"doc":"A basic ZipReader/Writer crate","i":[[3,"DateTime","zip","A DateTime field to be used for storing timestamps in a…",null,null],[4,"CompressionMethod","","Compression methods for the contents of a ZIP file.",null,null],[13,"Stored","","The file is stored (no compression)",0,null],[13,"Deflated","","Deflate in pure rust",0,null],[13,"Bzip2","","File is compressed using BZIP2 algorithm",0,null],[13,"Unsupported","","Unsupported compression method",0,null],[11,"from_u16","","Converts an u16 to its corresponding CompressionMethod",0,[[],["compressionmethod",4]]],[11,"to_u16","","Converts a CompressionMethod to a u16",0,[[]]],[0,"read","","Structs for reading a ZIP archive",null,null],[3,"ZipArchive","zip::read","Wrapper for reading the contents of a ZIP file.",null,null],[3,"ZipFile","","A struct for reading a zip file",null,null],[5,"read_zipfile_from_stream","","Read ZipFile structures from a non-seekable reader.",null,[[],[["option",4],["zipresult",6]]]],[11,"new","","Opens a Zip archive and parses the central directory",1,[[],[["zipresult",6],["ziparchive",3]]]],[11,"len","","Number of files contained in this zip.",1,[[]]],[11,"is_empty","","Whether this zip archive contains no files",1,[[]]],[11,"offset","","Get the offset from the beginning of the underlying reader…",1,[[]]],[11,"comment","","Get the comment of the zip archive.",1,[[]]],[11,"file_names","","Returns an iterator over all the file and directory names…",1,[[]]],[11,"by_name","","Search for a file entry by name",1,[[],[["zipfile",3],["zipresult",6]]]],[11,"by_index","","Get a contained file by index",1,[[],[["zipfile",3],["zipresult",6]]]],[11,"into_inner","","Unwrap and return the inner reader object",1,[[]]],[11,"version_made_by","","Get the version of the file",2,[[]]],[11,"name","","Get the name of the file",2,[[]]],[11,"name_raw","","Get the name of the file, in the raw (internal) byte…",2,[[]]],[11,"sanitized_name","","Get the name of the file in a sanitized form. It truncates…",2,[[],["pathbuf",3]]],[11,"comment","","Get the comment of the file",2,[[]]],[11,"compression","","Get the compression method used to store the file",2,[[],["compressionmethod",4]]],[11,"compressed_size","","Get the size of the file in the archive",2,[[]]],[11,"size","","Get the size of the file when uncompressed",2,[[]]],[11,"last_modified","","Get the time the file was last modified",2,[[],["datetime",3]]],[11,"is_dir","","Returns whether the file is actually a directory",2,[[]]],[11,"is_file","","Returns whether the file is a regular file",2,[[]]],[11,"unix_mode","","Get unix mode for the file",2,[[],["option",4]]],[11,"crc32","","Get the CRC32 hash of the original file",2,[[]]],[11,"data_start","","Get the starting offset of the data of the compressed file",2,[[]]],[0,"result","zip","Error types that can be emitted from this library",null,null],[4,"ZipError","zip::result","Error type for Zip",null,null],[13,"Io","","An Error caused by I/O",3,null],[13,"InvalidArchive","","This file is probably not a zip archive",3,null],[13,"UnsupportedArchive","","This archive is not supported",3,null],[13,"FileNotFound","","The requested file could not be found in the archive",3,null],[6,"ZipResult","","Generic result type with ZipError as its error variant",null,null],[11,"from_msdos","zip","Converts an msdos (u16, u16) pair to a DateTime object",4,[[],["datetime",3]]],[11,"from_date_and_time","","Constructs a DateTime from a specific date and time",4,[[],[["result",4],["datetime",3]]]],[11,"from_time","","Converts a ::time::Tm object to a DateTime",4,[[["tm",3]],[["result",4],["datetime",3]]]],[11,"timepart","","Gets the time portion of this datetime in the msdos…",4,[[]]],[11,"datepart","","Gets the date portion of this datetime in the msdos…",4,[[]]],[11,"to_time","","Converts the datetime to a Tm structure",4,[[],["tm",3]]],[11,"year","","Get the year. There is no epoch, i.e. 2018 will be…",4,[[]]],[11,"month","","Get the month, where 1 = january and 12 = december",4,[[]]],[11,"day","","Get the day",4,[[]]],[11,"hour","","Get the hour",4,[[]]],[11,"minute","","Get the minute",4,[[]]],[11,"second","","Get the second",4,[[]]],[0,"write","","Structs for creating a new zip archive",null,null],[3,"ZipWriter","zip::write","Generator for ZIP files.",null,null],[3,"FileOptions","","Metadata for a file to be written",null,null],[11,"default","","Construct a new FileOptions object",5,[[],["fileoptions",3]]],[11,"compression_method","","Set the compression method for the new file",5,[[["compressionmethod",4]],["fileoptions",3]]],[11,"last_modified_time","","Set the last modified time",5,[[["datetime",3]],["fileoptions",3]]],[11,"unix_permissions","","Set the permissions for the new file.",5,[[],["fileoptions",3]]],[11,"new","","Initializes the ZipWriter.",6,[[],["zipwriter",3]]],[11,"set_comment","","Set ZIP archive comment. Defaults to \'zip-rs\' if not set.",6,[[]]],[11,"start_file","","Starts a file.",6,[[["fileoptions",3]],["zipresult",6]]],[11,"start_file_from_path","","Starts a file, taking a Path as argument.",6,[[["fileoptions",3],["path",3]],["zipresult",6]]],[11,"add_directory","","Add a directory entry.",6,[[["fileoptions",3]],["zipresult",6]]],[11,"add_directory_from_path","","Add a directory entry, taking a Path as argument.",6,[[["fileoptions",3],["path",3]],["zipresult",6]]],[11,"finish","","Finish the last file and write all other zip-structures",6,[[],["zipresult",6]]],[11,"from","zip","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","zip::read","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"read_u64","","",2,[[],[["result",4],["error",3]]]],[11,"read_u32","","",2,[[],[["result",4],["error",3]]]],[11,"read_u16","","",2,[[],[["error",3],["result",4]]]],[11,"read_u8","","",2,[[],[["result",4],["error",3]]]],[11,"read_i64","","",2,[[],[["error",3],["result",4]]]],[11,"read_i32","","",2,[[],[["result",4],["error",3]]]],[11,"read_i16","","",2,[[],[["result",4],["error",3]]]],[11,"read_i8","","",2,[[],[["result",4],["error",3]]]],[11,"read_f64","","",2,[[],[["error",3],["result",4]]]],[11,"read_f32","","",2,[[],[["result",4],["error",3]]]],[11,"read_exact","","",2,[[],[["vec",3],["error",3],["result",4]]]],[11,"from","zip::result","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","zip::write","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"write_u64","","",6,[[],[["result",4],["error",3]]]],[11,"write_u32","","",6,[[],[["result",4],["error",3]]]],[11,"write_u16","","",6,[[],[["result",4],["error",3]]]],[11,"write_u8","","",6,[[],[["result",4],["error",3]]]],[11,"write_i64","","",6,[[],[["result",4],["error",3]]]],[11,"write_i32","","",6,[[],[["result",4],["error",3]]]],[11,"write_i16","","",6,[[],[["result",4],["error",3]]]],[11,"write_i8","","",6,[[],[["result",4],["error",3]]]],[11,"write_f32","","",6,[[],[["result",4],["error",3]]]],[11,"write_f64","","",6,[[],[["result",4],["error",3]]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"drop","zip::read","",2,[[]]],[11,"drop","zip::write","",6,[[]]],[11,"from","zip::result","",3,[[["error",3]]]],[11,"clone","zip","",0,[[],["compressionmethod",4]]],[11,"clone","zip::read","",1,[[],["ziparchive",3]]],[11,"clone","zip","",4,[[],["datetime",3]]],[11,"clone","zip::write","",5,[[],["fileoptions",3]]],[11,"default","zip","Constructs an \'default\' datetime of 1980-01-01 00:00:00",4,[[],["datetime",3]]],[11,"default","zip::write","",5,[[]]],[11,"eq","zip","",0,[[["compressionmethod",4]]]],[11,"ne","","",0,[[["compressionmethod",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","zip::read","",1,[[["formatter",3]],["result",6]]],[11,"fmt","zip::result","",3,[[["formatter",3]],["result",6]]],[11,"fmt","zip","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","zip::result","",3,[[["formatter",3]],["result",6]]],[11,"source","","",3,[[],[["error",8],["option",4]]]],[11,"read","zip::read","",2,[[],["result",6]]],[11,"write","zip::write","",6,[[],["result",6]]],[11,"flush","","",6,[[],["result",6]]]],"p":[[4,"CompressionMethod"],[3,"ZipArchive"],[3,"ZipFile"],[4,"ZipError"],[3,"DateTime"],[3,"FileOptions"],[3,"ZipWriter"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);