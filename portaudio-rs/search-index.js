var searchIndex={};
searchIndex["portaudio_rs"] = {"doc":"PortAudio bindings for Rust","i":[[4,"PaError","portaudio_rs","Enum for all possible errors given by PortAudio",null,null],[13,"NotInitialized","","",0,null],[13,"UnanticipatedHostError","","",0,null],[13,"InvalidChannelCount","","",0,null],[13,"InvalidSampleRate","","",0,null],[13,"InvalidDevice","","",0,null],[13,"InvalidFlag","","",0,null],[13,"SampleFormatNotSupported","","",0,null],[13,"BadIODeviceCombination","","",0,null],[13,"InsufficientMemory","","",0,null],[13,"BufferTooBig","","",0,null],[13,"BufferTooSmall","","",0,null],[13,"NullCallback","","",0,null],[13,"BadStreamPtr","","",0,null],[13,"TimedOut","","",0,null],[13,"InternalError","","",0,null],[13,"DeviceUnavailable","","",0,null],[13,"IncompatibleHostApiSpecificStreamInfo","","",0,null],[13,"StreamIsStopped","","",0,null],[13,"StreamIsNotStopped","","",0,null],[13,"InputOverflowed","","",0,null],[13,"OutputUnderflowed","","",0,null],[13,"HostApiNotFound","","",0,null],[13,"InvalidHostApi","","",0,null],[13,"CanNotReadFromACallbackStream","","",0,null],[13,"CanNotWriteToACallbackStream","","",0,null],[13,"CanNotReadFromAnOutputOnlyStream","","",0,null],[13,"CanNotWriteToAnInputOnlyStream","","",0,null],[13,"IncompatibleStreamHostApi","","",0,null],[13,"BadBufferPtr","","",0,null],[13,"UnknownError","","Added variant for when FromPrimitive returns None",0,null],[5,"initialize","","Initialize the PortAudio API",null,[[],["paresult"]]],[5,"terminate","","Terminate the PortAudio API",null,[[],["paresult"]]],[5,"version","","PortAudio version",null,[[],["i32"]]],[5,"version_text","","Human-readable PortAudio version",null,[[],["string"]]],[0,"stream","","Contains the Stream class and associated values",null,null],[3,"StreamTimeInfo","portaudio_rs::stream","Time information for various stream related values",null,null],[12,"input_adc_time","","Timestamp for the ADC capture time of the first frame",1,null],[12,"current_time","","Timestamp that the callback was invoked",1,null],[12,"output_dac_time","","Timestamp for the DAC output time of the first frame",1,null],[3,"StreamCallbackFlags","","Flags indicating the status of the callback",null,null],[3,"StreamFlags","","Flags used to control the behavior of a stream",null,null],[3,"Stream","","An object for an PortAudio stream",null,null],[3,"StreamParameters","","Stream parameters to be used with Stream::open()",null,null],[12,"device","","Index of the device to use",2,null],[12,"channel_count","","Requested number of channels",2,null],[12,"suggested_latency","","Desired latency of the stream",2,null],[12,"data","","Sample data to be used in the stream",2,null],[3,"StreamInfo","","Information about the actual latency and sample rate…",null,null],[12,"input_latency","","Input latency",3,null],[12,"output_latency","","Output latency",3,null],[12,"sample_rate","","Sample rate",3,null],[4,"StreamCallbackResult","","Allowable return values for a StreamCallback",null,null],[13,"Continue","","Continue invoking the callback",4,null],[13,"Complete","","Stop invoking the callback and finish once everything has…",4,null],[13,"Abort","","Stop invoking the callback and finish as soon as possible",4,null],[5,"is_format_supported","","Returns Ok when the StreamParameters are supported. This…",null,[[["streamparameters"],["streamparameters"],["option",["streamparameters"]],["f64"],["option",["streamparameters"]]],["paresult"]]],[6,"StreamCallback","","Callback to consume, process or generate audio",null,null],[6,"StreamFinishedCallback","","Callback to be fired when a StreamCallback is stopped",null,null],[17,"FRAMES_PER_BUFFER_UNSPECIFIED","","Argument to Stream::open() or Stream::open_default() to…",null,null],[8,"SampleType","","Types that are allowed to be used as samples in a Stream",null,null],[10,"sample_format","","Should return the PortAudio flag which corresponds to the…",5,[[],["u64"]]],[18,"INPUT_UNDERFLOW","","Indicates that the callback has inserted one or more…",6,null],[18,"INPUT_OVERFLOW","","Indicates that the callback has discarded some data",6,null],[18,"OUTPUT_UNDERFLOW","","Indicates that extra data was inserted in the output since…",6,null],[18,"OUTPUT_OVERFLOW","","Indicates that certain data was discarded since there was…",6,null],[18,"PRIMING_OUTPUT","","Some or all of the output data will be used to prime the…",6,null],[11,"empty","","Returns an empty set of flags",6,[[],["streamcallbackflags"]]],[11,"all","","Returns the set containing all flags.",6,[[],["streamcallbackflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",6,[[["self"]],["u64"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",6,[[["u64"]],[["option",["streamcallbackflags"]],["streamcallbackflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",6,[[["u64"]],["streamcallbackflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",6,[[["u64"]],["streamcallbackflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",6,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",6,[[["self"],["streamcallbackflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",6,[[["self"],["streamcallbackflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",6,[[["self"],["streamcallbackflags"]]]],[11,"remove","","Removes the specified flags in-place.",6,[[["self"],["streamcallbackflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",6,[[["self"],["streamcallbackflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",6,[[["self"],["streamcallbackflags"],["bool"]]]],[18,"CLIP_OFF","","Disable clipping of out of range samples",7,null],[18,"DITHER_OFF","","Disable dithering",7,null],[18,"NEVER_DROP_INPUT","","Request that a full duplex stream will not discard…",7,null],[18,"PRIME_OUTPUT_BUFFERS_USING_STREAM_CALLBACK","","Call the stream callback to fill initial output buffers,…",7,null],[18,"PLATFORM_SPECIFIC","","Range for platform specific flags. Not all of the upper 16…",7,null],[11,"empty","","Returns an empty set of flags",7,[[],["streamflags"]]],[11,"all","","Returns the set containing all flags.",7,[[],["streamflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",7,[[["self"]],["u64"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",7,[[["u64"]],[["option",["streamflags"]],["streamflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",7,[[["u64"]],["streamflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",7,[[["u64"]],["streamflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",7,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",7,[[["streamflags"],["self"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",7,[[["streamflags"],["self"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",7,[[["self"],["streamflags"]]]],[11,"remove","","Removes the specified flags in-place.",7,[[["self"],["streamflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",7,[[["self"],["streamflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",7,[[["self"],["streamflags"],["bool"]]]],[11,"open_default","","Constructs a stream using the default input and output…",8,[[["option",["box"]],["u32"],["box",["streamcallback"]],["f64"],["u64"]],[["result",["stream","paerror"]],["stream"],["paerror"]]]],[11,"open","","Constructs a stream with the desired input and output…",8,[[["streamparameters"],["option",["streamparameters"]],["option",["streamparameters"]],["u64"],["streamparameters"],["option",["box"]],["streamflags"],["f64"],["box",["streamcallback"]]],[["result",["stream","paerror"]],["stream"],["paerror"]]]],[11,"start","","Starts the stream",8,[[["self"]],["paresult"]]],[11,"stop","","Stops the stream. It will block untill all audio has…",8,[[["self"]],["paresult"]]],[11,"abort","","Stop stream immediately without waiting for the buffers to…",8,[[["self"]],["paresult"]]],[11,"is_stopped","","Returns wether the stream is stopped",8,[[["self"]],[["result",["bool","paerror"]],["paerror"],["bool"]]]],[11,"is_active","","Returns wether the stream is active",8,[[["self"]],[["result",["bool","paerror"]],["paerror"],["bool"]]]],[11,"num_read_available","","Get the number of frames that can be read from the stream…",8,[[["self"]],[["paerror"],["u32"],["result",["u32","paerror"]]]]],[11,"num_write_available","","Get the number of frames that can be written to the stream…",8,[[["self"]],[["paerror"],["u32"],["result",["u32","paerror"]]]]],[11,"write","","Write the given buffer to the stream. This function blocks",8,[[["self"]],["paresult"]]],[11,"read","","Reads the requested number of frames from the input…",8,[[["u32"],["self"]],[["paerror"],["vec"],["result",["vec","paerror"]]]]],[11,"cpu_load","","Returns the cpu load the stream callback consumes. This…",8,[[["self"]],["f64"]]],[11,"time","","Get the current timestamp of the stream",8,[[["self"]],["duration"]]],[11,"info","","Get the actual latencies and sample rate",8,[[["self"]],[["streaminfo"],["option",["streaminfo"]]]]],[11,"set_finished_callback","","Set a callback which is to be called when the…",8,[[["box",["streamfinishedcallback"]],["self"],["streamfinishedcallback"]],["paresult"]]],[11,"unset_finished_callback","","Remove any previously attached finish callback",8,[[["self"]],["paresult"]]],[11,"from_i32","portaudio_rs","Get the enum value corresponding to the given i32",0,[[["i32"]],["paerror"]]],[0,"hostapi","","Info module for available audio host API's",null,null],[3,"HostApiInfo","portaudio_rs::hostapi","Information about a specific host API",null,null],[12,"api_type","","The type of the API",9,null],[12,"name","","Human-readable name of the API",9,null],[12,"device_count","","Number of devices this API has",9,null],[12,"default_input","","Default input device of the API. Is None if there is no…",9,null],[12,"default_output","","Default output device of the API. Is None if there is no…",9,null],[3,"HostErrorInfo","","Error info obtained by get_last_error",null,null],[12,"code","","The error code given",10,null],[12,"text","","A human readable error message",10,null],[12,"api_type","","The type of the API that produced the error",10,null],[4,"HostApiType","","Possible Host API types",null,null],[13,"InDevelopment","","",11,null],[13,"DirectSound","","",11,null],[13,"MME","","",11,null],[13,"ASIO","","",11,null],[13,"SoundManager","","",11,null],[13,"CoreAudio","","",11,null],[13,"OSS","","",11,null],[13,"ALSA","","",11,null],[13,"AL","","",11,null],[13,"BeOS","","",11,null],[13,"WDMKS","","",11,null],[13,"JACK","","",11,null],[13,"WASAPI","","",11,null],[13,"AudioScienceHPI","","",11,null],[13,"Unknown","","Added for when FromPrimitive returns None",11,null],[5,"get_last_error","","Return information about the last host error encountered.",null,[[],[["option",["hosterrorinfo"]],["hosterrorinfo"]]]],[5,"get_count","","Get the number of host API's available",null,[[],[["paerror"],["u32"],["result",["u32","paerror"]]]]],[5,"get_default_index","","Get the default Host API",null,[[],[["result",["hostapiindex","paerror"]],["paerror"],["hostapiindex"]]]],[5,"get_info","","Get information about a specific Host API",null,[[["hostapiindex"]],[["hostapiinfo"],["option",["hostapiinfo"]]]]],[6,"HostApiIndex","","Index number of a Host API",null,null],[11,"to_api_index","","Convert a static host API unique identifier, into a…",11,[[],[["result",["hostapiindex","paerror"]],["paerror"],["hostapiindex"]]]],[11,"from_u32","","Get the enum value corresponding to the u32",11,[[["u32"]],["hostapitype"]]],[0,"device","portaudio_rs","Info about connected audio devices",null,null],[3,"DeviceInfo","portaudio_rs::device","Information for a specific device",null,null],[12,"name","","Human readable name",12,null],[12,"host_api","","Index of the host API this device belongs to",12,null],[12,"max_input_channels","","Maximal number of input channels that can be used",12,null],[12,"max_output_channels","","Maximal number of ouput channels that can be used",12,null],[12,"default_low_input_latency","","Default input latency for interactive performance",12,null],[12,"default_low_output_latency","","Default output latency for interactive performance",12,null],[12,"default_high_input_latency","","Default input latency for robust non-interactive…",12,null],[12,"default_high_output_latency","","Default output latency for robust non-interactive…",12,null],[12,"default_sample_rate","","Default sample rate",12,null],[5,"get_count","","Retrieve the number of available devices.",null,[[],[["paerror"],["u32"],["result",["u32","paerror"]]]]],[5,"get_default_input_index","","Retrieve the index of the default input device",null,[[],[["deviceindex"],["option",["deviceindex"]]]]],[5,"get_default_output_index","","Retrieve the index of the default output device",null,[[],[["deviceindex"],["option",["deviceindex"]]]]],[5,"get_info","","Get info about a particular device",null,[[["deviceindex"]],[["deviceinfo"],["option",["deviceinfo"]]]]],[5,"get_from_host_api_device_index","","Converts a device index from a specific host API to a…",null,[[["u32"],["hostapiindex"]],[["deviceindex"],["result",["deviceindex","paerror"]],["paerror"]]]],[6,"DeviceIndex","","Index of a Device",null,null],[6,"PaResult","portaudio_rs","A result type wrapping PaError.",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","portaudio_rs::stream","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","portaudio_rs::hostapi","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","portaudio_rs::device","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"drop","portaudio_rs::stream","",8,[[["self"]]]],[11,"extend","","",6,[[["self"],["intoiterator"]]]],[11,"extend","","",7,[[["self"],["intoiterator"]]]],[11,"clone","","",4,[[["self"]],["streamcallbackresult"]]],[11,"clone","","",1,[[["self"]],["streamtimeinfo"]]],[11,"clone","","",6,[[["self"]],["streamcallbackflags"]]],[11,"clone","","",7,[[["self"]],["streamflags"]]],[11,"clone","","",2,[[["self"]],["streamparameters"]]],[11,"clone","","",3,[[["self"]],["streaminfo"]]],[11,"clone","portaudio_rs","",0,[[["self"]],["paerror"]]],[11,"clone","portaudio_rs::hostapi","",11,[[["self"]],["hostapitype"]]],[11,"cmp","portaudio_rs::stream","",6,[[["streamcallbackflags"],["self"]],["ordering"]]],[11,"cmp","","",7,[[["self"],["streamflags"]],["ordering"]]],[11,"eq","","",6,[[["streamcallbackflags"],["self"]],["bool"]]],[11,"ne","","",6,[[["streamcallbackflags"],["self"]],["bool"]]],[11,"eq","","",7,[[["self"],["streamflags"]],["bool"]]],[11,"ne","","",7,[[["self"],["streamflags"]],["bool"]]],[11,"eq","portaudio_rs","",0,[[["self"],["paerror"]],["bool"]]],[11,"partial_cmp","portaudio_rs::stream","",6,[[["streamcallbackflags"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",6,[[["streamcallbackflags"],["self"]],["bool"]]],[11,"le","","",6,[[["streamcallbackflags"],["self"]],["bool"]]],[11,"gt","","",6,[[["streamcallbackflags"],["self"]],["bool"]]],[11,"ge","","",6,[[["streamcallbackflags"],["self"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["streamflags"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",7,[[["self"],["streamflags"]],["bool"]]],[11,"le","","",7,[[["self"],["streamflags"]],["bool"]]],[11,"gt","","",7,[[["self"],["streamflags"]],["bool"]]],[11,"ge","","",7,[[["self"],["streamflags"]],["bool"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","portaudio_rs","",0,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",0,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"sub","portaudio_rs::stream","Returns the set difference of the two sets of flags.",6,[[["streamcallbackflags"]],["streamcallbackflags"]]],[11,"sub","","Returns the set difference of the two sets of flags.",7,[[["streamflags"]],["streamflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",6,[[["self"],["streamcallbackflags"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",7,[[["self"],["streamflags"]]]],[11,"not","","Returns the complement of this set of flags.",6,[[],["streamcallbackflags"]]],[11,"not","","Returns the complement of this set of flags.",7,[[],["streamflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",6,[[["streamcallbackflags"]],["streamcallbackflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",7,[[["streamflags"]],["streamflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",6,[[["streamcallbackflags"]],["streamcallbackflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",7,[[["streamflags"]],["streamflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",6,[[["streamcallbackflags"]],["streamcallbackflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",7,[[["streamflags"]],["streamflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",6,[[["self"],["streamcallbackflags"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",7,[[["self"],["streamflags"]]]],[11,"bitor_assign","","Adds the set of flags.",6,[[["self"],["streamcallbackflags"]]]],[11,"bitor_assign","","Adds the set of flags.",7,[[["self"],["streamflags"]]]],[11,"bitxor_assign","","Toggles the set of flags.",6,[[["self"],["streamcallbackflags"]]]],[11,"bitxor_assign","","Toggles the set of flags.",7,[[["self"],["streamflags"]]]],[11,"hash","","",6,[[["self"],["__h"]]]],[11,"hash","","",7,[[["self"],["__h"]]]],[11,"from_iter","","",6,[[["intoiterator"]],["streamcallbackflags"]]],[11,"from_iter","","",7,[[["intoiterator"]],["streamflags"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]]],"p":[[4,"PaError"],[3,"StreamTimeInfo"],[3,"StreamParameters"],[3,"StreamInfo"],[4,"StreamCallbackResult"],[8,"SampleType"],[3,"StreamCallbackFlags"],[3,"StreamFlags"],[3,"Stream"],[3,"HostApiInfo"],[3,"HostErrorInfo"],[4,"HostApiType"],[3,"DeviceInfo"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);